// ==UserScript==
// @name         YouTube Studio Stats Extractor (v2.6 Auto Collect Fix)
// @namespace    http://tampermonkey.net/
// @version      2.7.2
// @description  –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ –≤–∫–ª–∞–¥–æ–∫ Overview + Content, —ñ–º—ñ—Ç–∞—Ü—ñ—è –∫–ª—ñ–∫—ñ–≤, –¥–≤–∞ –º–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞, –æ–∫—Ä–µ–º—ñ —Ä–µ–∂–∏–º–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
// @author       –Æ–ª—è
// @match        https://studio.youtube.com/*
// @grant        GM_setClipboard
// @grant        GM_xmlhttpRequest
// @connect      script.google.com
// ==/UserScript==

(function () {
    'use strict';

    let overviewDataTemp = '';
    let contentDataTemp = '';
    let forceCollect = false;
    let redirectedFromWrongTab = false;
    let totalVideos = '';

    console.log('üü¢ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');

    const observer = new MutationObserver(() => {
        const headerContainer = document.querySelector('#right-section-content');
        if (headerContainer && !document.querySelector('#extract-button')) {
            console.log('üîò –Ü–Ω–∂–µ–∫—Ç –∫–Ω–æ–ø–∫–∏...');
            injectButton(headerContainer);
        }
    });
    observer.observe(document.body, { childList: true, subtree: true });

    function injectButton(container) {
        const button = document.createElement('button');
        button.textContent = 'üìä –î–∞–Ω—ñ';
        button.id = 'extract-button';
        button.style = `
            margin-left: 10px;
            background-color: #3ea6ff;
            color: white;
            border: none;
            padding: 6px 12px;
            font-weight: bold;
            border-radius: 4px;
            cursor: pointer;
        `;
        button.onclick = () => {
            console.log('üü° –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ "–î–∞–Ω—ñ"');
            forceCollect = true;
            redirectedFromWrongTab = false;
            startCombinedDataCollection(true);
        };
        container.appendChild(button);
    }

    function parseNumber(text) {
        if (!text) return '';
        const raw = text.replace(/\s/g, '').replace(',', '.').toLowerCase();
        if (raw.includes('%') || raw.match(/^\d+:\d+/)) return raw;
        let value = parseFloat(raw);
        if (isNaN(value)) return '';
        if (raw.includes('—Ç—ã—Å') || raw.includes('—Ç–∏—Å')) value = Math.round(value * 1000);
        return value;
    }

    function startCombinedDataCollection(startingFromButton = false) {
        const currentPath = window.location.pathname;
        console.log('üìç startCombinedDataCollection | path:', currentPath);
        console.log('üìç startingFromButton:', startingFromButton, '| forceCollect:', forceCollect);

        if (currentPath.includes('/tab-overview/')) {
            console.log('üìò –ù–∞ –≤–∫–ª–∞–¥—Ü—ñ Overview');
            extractOverviewData(() => {
                console.log('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ Content');
                clickContentTab();
            });
        } else if (currentPath.includes('/tab-content/')) {
            console.log('üìò –ù–∞ –≤–∫–ª–∞–¥—Ü—ñ Content');
            extractContentDataAndSend();
        } else if (startingFromButton || forceCollect) {
            console.log('üîÅ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Analytics');
            clickAnalyticsTab();
        } else {
            console.log('‚èπ –£–º–æ–≤–∞ –Ω–µ –≤–∏–∫–æ–Ω–∞–ª–∞—Å—å, –∑–±—ñ—Ä –Ω–µ –ø–æ—á–∞–≤—Å—è');
        }
    }

    function waitForElement(selector, callback, logStep = '') {
        const checkExist = setInterval(() => {
            const el = document.querySelector(selector);
            if (el) {
                clearInterval(checkExist);
                console.log('‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç:', selector, logStep);
                callback(el);
            } else {
                console.log('‚è≥ –û—á—ñ–∫—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç:', selector, logStep);
            }
        }, 500);
    }

    function clickAnalyticsTab() {
        waitForElement('#menu-paper-icon-item-2', (menuItem) => {
            console.log('üìå –ö–ª—ñ–∫ –Ω–∞ Analytics');
            forceCollect = true;
            menuItem.click();
            console.log('üïì –û—á—ñ–∫—É—î–º–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç –∞–±–æ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É Overview');
const waitForRedirect = setInterval(() => {
    if (window.location.pathname.includes('/tab-overview/')) {
        clearInterval(waitForRedirect);
        console.log('üîÑ –£–∂–µ –Ω–∞ –≤–∫–ª–∞–¥—Ü—ñ Overview, –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä—Ç');
        redirectedFromWrongTab = true;
    }
}, 500);
        }, '[step: clickAnalyticsTab]');
    }

    const locationCheck = setInterval(() => {
        const path = window.location.pathname;
        if (redirectedFromWrongTab && path.includes('/tab-overview/')) {
            console.log('üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å—Ç–∞—Ä—Ç—É—î–º–æ –∑–±—ñ—Ä');
            redirectedFromWrongTab = false;
            setTimeout(() => {
                startCombinedDataCollection(true);
            }, 1500);
        }
    }, 1000);

    function clickContentTab() {
        waitForElement('#content', (contentTab) => {
            console.log('üìå –ö–ª—ñ–∫ –Ω–∞ Content');
            contentTab.click();
            waitForElement('#metric-total', () => {
                console.log('‚è≥ –ó–Ω–∞–π–¥–µ–Ω–æ –±–ª–æ–∫ #metric-total, —á–µ–∫–∞—î–º–æ 3 —Å–µ–∫—É–Ω–¥–∏ –Ω–∞ –ø—Ä–æ–≥—Ä—É–∑–∫—É –¥–∞–Ω–∏—Ö...');
                    setTimeout(() => {
                    extractContentDataAndSend();
                    }, 3000); // 3000 –º—Å = 3 —Å–µ–∫—É–Ω–¥–∏
                }, '[step: –ø—ñ—Å–ª—è –∫–ª—ñ–∫ –Ω–∞ Content]');
        }, '[step: clickContentTab]');
    }

    function clickLeftSidebarContentTab(callback) {
        const selector = '#menu-paper-icon-item-1';
        waitForElement(selector, (contentTab) => {
            console.log('üìå –ö–ª—ñ–∫ —É –ª—ñ–≤–æ–º—É –º–µ–Ω—é –Ω–∞ Content');
            contentTab.click();
            setTimeout(() => {
                if (typeof callback === 'function') callback();
            }, 1500);
        }, '[step: –∫–ª—ñ–∫ –ø–æ menu-paper-icon-item-1]');
    }
function goToVideosAndExtractCount(contentMetrics) {
    const selector = '#menu-paper-icon-item-1';
    waitForElement(selector, (contentTab) => {
        console.log('üìå –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É /videos –¥–ª—è –∑–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–µ–æ');
        contentTab.click();
        waitForElement('.page-description', () => {
            const el = document.querySelector('.page-description');
            if (!el) {
                console.warn('‚ö†Ô∏è .page-description –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            const text = el.textContent.trim();
            const match = text.match(/(?:–∏–∑|of)\s*(\d+)/i);
            if (!match || !match[1]) {
                console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ');
                return;
            }

            const total = parseInt(match[1].replace(/\s/g, ''), 10);
            console.log('üéû –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ:', total);

            // —Ñ–æ—Ä–º—É—î–º–æ contentDataTemp –∑ totalVideos
            const channelName = overviewDataTemp.split(';')[0] || 'Channel';
            contentDataTemp = `${channelName};${contentMetrics.impressions};${contentMetrics.ctr};${contentMetrics.avgViewDuration};${contentMetrics.dateRange};${total}`;

            // –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –æ–±–∏–¥–≤–∞
            showModal('üìä Overview Data', overviewDataTemp);
            showModal('üì∫ Content Data', contentDataTemp);

            sendToSheet(overviewDataTemp, 'overview');
            sendToSheet(contentDataTemp, 'content');
        }, '[step: page-description]');
    }, '[step: –∫–ª—ñ–∫ —É –ª—ñ–≤–æ–º—É –º–µ–Ω—é]');
}

function extractTotalVideosCount(callback) {
    waitForElement('.page-description', (el) => {
        const text = el.textContent.trim();
        const match = text.match(/(?:–∏–∑|of)\s*(\d+)/i);
        if (match && match[1]) {
            const total = parseInt(match[1].replace(/\s/g, ''), 10);
            console.log('üì¶ –í—Å—å–æ–≥–æ –≤—ñ–¥–µ–æ –Ω–∞ –∫–∞–Ω–∞–ª—ñ:', total);
            if (typeof callback === 'function') callback(total);
        } else {
            console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ');
            if (typeof callback === 'function') callback('');
        }
    }, '[step: extractTotalVideosCount]');
}

   function extractOverviewData(callback) {
    waitForElement('.metric-value.style-scope.yta-latest-activity-card', () => {
        try {
            console.log('üìä –ó–±—ñ—Ä overview-–¥–∞–Ω–∏—Ö...');
            const metricElems = document.querySelectorAll('.metric-value.style-scope.yta-latest-activity-card');
            const views48h = parseNumber(metricElems[0]?.textContent || '0');
            const subscribers = parseNumber(metricElems[1]?.textContent || '0');

            const totals = Array.from(document.querySelectorAll('#metric-total'))
                .map(el => el.textContent.trim());

            const viewsPeriod = parseNumber(totals[0] || '0');
            const hoursPeriod = parseNumber(totals[1] || '0');

            const channelName = document.querySelector('#entity-name.entity-name')?.textContent.trim() || '–ë–µ–∑ –Ω–∞–∑–≤–∏';
            const dateRange = new Date().toLocaleDateString('uk-UA');

            // üíæ –ë–ï–ó totalVideos –ø–æ–∫–∏ —â–æ ‚Äî –≤—ñ–Ω –¥–æ–¥–∞—Å—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ
            overviewDataTemp = `${channelName};${dateRange};${views48h};${viewsPeriod};${hoursPeriod};${subscribers}`;

            console.log('üì¶ Overview:', overviewDataTemp);

            if (typeof callback === 'function') callback();
        } catch (e) {
            alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ overview-–¥–∞–Ω–∏—Ö: ' + e.message);
        }
    }, '[step: extractOverviewData]');
}

function extractTotalVideosCount() {
    const paginatorSpan = document.querySelector('ytcp-paginator span');
    if (!paginatorSpan) {
        console.warn('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ paginator span');
        return '';
    }

    const text = paginatorSpan.textContent.trim();
    const match = text.match(/(?:—ñ–∑|of)\s+(\d+)/i);
    if (match && match[1]) {
        const total = parseInt(match[1].replace(/\s/g, ''), 10);
        return isNaN(total) ? '' : total;
    }
    return '';
}

function extractContentDataAndSend() {
    try {
        console.log('üìä –ó–±—ñ—Ä content-–¥–∞–Ω–∏—Ö...');
        const totals = Array.from(document.querySelectorAll('#metric-total'))
            .map(el => el.textContent.trim());

        const views = parseNumber(totals[0] || '');
        const impressions = parseNumber(totals[1] || '');
        const ctr = parseNumber(totals[2] || '');
        const avgViewDuration = parseNumber(totals[3] || '');

        const dateRange = new Date().toLocaleDateString('uk-UA');

        // —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—ñ –¥–∞–Ω—ñ
        const contentMetrics = { impressions, ctr, avgViewDuration, dateRange };

        // –π–¥–µ–º–æ –¥–∞–ª—ñ –∑–∞ totalVideos
        goToVideosAndExtractCount(contentMetrics);

    } catch (e) {
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ content-–¥–∞–Ω–∏—Ö: ' + e.message);
    }
}


    function showModal(title, data) {
        const modal = document.createElement('div');
        modal.style = `
            position: fixed;
            top: 20%;
            left: 50%;
            transform: translateX(-50%);
            background: #202020;
            color: white;
            padding: 20px;
            border-radius: 8px;
            z-index: 99999;
            box-shadow: 0 4px 12px rgba(0,0,0,0.5);
            font-family: sans-serif;
            max-width: 90%;
        `;

        const closeButton = document.createElement('div');
        closeButton.textContent = '‚úñ';
        closeButton.style = `
            position: absolute;
            top: 8px;
            right: 10px;
            cursor: pointer;
            font-size: 16px;
        `;
        closeButton.onclick = () => modal.remove();

        const heading = document.createElement('div');
        heading.textContent = title;
        heading.style = 'font-weight: bold; margin-bottom: 10px; font-size: 18px;';

        const text = document.createElement('div');
        text.textContent = data;
        text.style = 'margin-bottom: 10px; font-size: 16px; word-break: break-word;';

        const copyButton = document.createElement('button');
        copyButton.textContent = 'üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏';
        copyButton.style = `
            background-color: #3ea6ff;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
        `;
        copyButton.onclick = () => {
            GM_setClipboard(data);
            copyButton.textContent = '‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!';
            setTimeout(() => copyButton.textContent = 'üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏', 2000);
        };

        modal.appendChild(closeButton);
        modal.appendChild(heading);
        modal.appendChild(text);
        modal.appendChild(copyButton);
        document.body.appendChild(modal);

        setTimeout(() => {
            modal.remove();
        }, 15000);
    }

    function sendToSheet(value, mode) {
        GM_xmlhttpRequest({
            method: 'POST',
            url: 'https://script.google.com/macros/s/AKfycbyd0aMl6ZomWyWtNbzxMikqfYVq2RTArD0z97eyVaWWa3zDeLOk0qALtIkiseI393lS/exec',
            headers: {
                'Content-Type': 'application/json'
            },
            data: JSON.stringify({ mode: mode, value: value })
        });
    }
})();

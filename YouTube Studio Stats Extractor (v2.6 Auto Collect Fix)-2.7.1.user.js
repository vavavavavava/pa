// ==UserScript==
// @name         YouTube Studio Stats Extractor (No FAB, Remove Logout)
// @namespace    http://tampermonkey.net/
// @version      2.8.8
// @description  –ê–≤—Ç–æ–∑–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ Overview + Content, –±–µ–∑ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É —Ä–æ–±–æ—á–∏—Ö —á–∞—Å—Ç–∏–Ω. –î–æ–¥–∞—î monetization, 4-–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, Lifetime (3—Å), channelId.
// @match        https://studio.youtube.com/*
// @grant        GM_setClipboard
// @grant        GM_xmlhttpRequest
// @connect      script.google.com
// @run-at       document-idle
// @require https://cdn.jsdelivr.net/npm/tinyld/dist/tinyld.min.js
// ==/UserScript==

(function () {
  'use strict';

  // ---------- –ª–æ–≥—É–≤–∞–Ω–Ω—è ----------
  const LOGP = '[YSE]';
  const dlog = (...a) => console.log(LOGP, ...a);
  const derr = (...a) => console.error(LOGP, ...a);

  // ---------- —Å—Ç–∞–Ω ----------
  let overviewChannel = '';
  let overviewDateUTC = '';
  let oViews48h = '';
  let oViewsPeriod = '';
  let oHoursPeriod = '';
  let oSubscribers = '';

  let contentDateUTC = '';
  let forceCollect = false;

  // –¥–æ–¥–∞–Ω–æ –∑–∞ –¢–ó
  let monetization = false;   // true —è–∫—â–æ 4 –±–ª–æ–∫–∏ key-metric, false —è–∫—â–æ 3
  let fourthMetric = '';      // —Ç–µ–∫—Å—Ç #metric-total —É 4-–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ (—è–∫—â–æ —î)
  let overviewChannelId = ''; // UC‚Ä¶ –∑ URL

  // —Å–µ–∫—É–Ω–¥–æ–º—ñ—Ä –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è Content (üÜï)
  let contentWaitTimer = null;

  // ---------- —É—Ç–∏–ª—ñ—Ç–∏ ----------
  function getExtractButton() { return document.querySelector('#extract-button'); }
  function setButtonStatus(text) { const btn = getExtractButton(); if (btn) btn.textContent = text; }

  // üÜï –î–∞—Ç–∞ –∑–∞ —á–∞—Å–æ–≤–∏–º –ø–æ—è—Å–æ–º –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD
  function getDateInLA() {
    const laDate = new Date().toLocaleString("en-US", { timeZone: "America/Los_Angeles" });
    const d = new Date(laDate);
    const year = d.getFullYear();
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const day = String(d.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }

  const HEADER_SELECTORS = [
    '#right-section-content',
    'ytcp-header #right',
    'ytcp-header #right-section',
    'ytcp-header #right-container',
    '#right-section',
    '#right-content'
  ];
  function findHeaderContainer() {
    for (const q of HEADER_SELECTORS) { const el = document.querySelector(q); if (el) return el; }
    return null;
  }
// === –ê–í–¢–û-–°–¢–ê–¢–£–° –î–õ–Ø OMNISEARCH (–Ω–æ–≤–µ) ===
function computeAutoStatus({ monetizationFlag, views48h, hoursLifetime, subscribers, totalVideos }) {
  const v48 = Number(views48h) || 0;
  const hrs = Number(hoursLifetime) || 0;
  const subs = Number(subscribers) || 0;
  const vids = Number(totalVideos) || 0;

  // –ú–æ–Ω–µ—Ç–Ω—ñ
  if (monetizationFlag) {
    if (v48 >= 15000) return '–ú–æ–Ω–µ—Ç–∞ —Ç–æ–ø';
    if (v48 >= 10000) return '–ú–æ–Ω–µ—Ç–∞ –≥—É–¥';
    if (v48 >= 5000)  return '–ú–æ–Ω–µ—Ç–∞ –Ω–æ—Ä–º';
    if (v48 >= 2000)  return '–ú–æ–Ω–µ—Ç–∞ –≥–µ';
    return '–ú–æ–Ω–µ—Ç–∞ —Ç—ñ–Ω—å';
  }

  // –ù–ï –º–æ–Ω–µ—Ç–Ω—ñ
  if (hrs > 4000 && subs >= 500) return '–ß–µ–∫–∞—î–º–æ';
  if (hrs > 4000 && subs < 500)  return '–ü—ñ–¥–ø–∏—Å–∫–∏';
  if (v48 >= 10000)              return '–¢–æ–ø';
  if (v48 >= 5000)               return '–ì—É–¥';
  if (v48 > 2000 && v48 < 5000)  return '–ù–æ—Ä–º';
  if (hrs > 1000 && v48 <= 2000) return '–¢—ñ–Ω—å';

  // –†–æ–∑–≥–∞–ª—É–∂–µ–Ω–Ω—è –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≤—ñ–¥–µ–æ –ø—Ä–∏ –Ω–∏–∑—å–∫–∏—Ö v48
  if (vids >= 14 && v48 <= 2000 && vids < 20) return '–ü–∞—É–∑–∞';
  if (vids > 20 && v48 <= 2000)               return '–ó–∞–º—ñ–Ω–∞';
  if (vids < 14 && v48 < 2000 && v48 > 100)   return '–¢–µ—Å—Ç–æ–≤—ñ';
  if (vids < 14 && v48 < 100)                 return '–ù—É–ª—è—á—ñ';

  // –§–æ–ª–±–µ–∫, —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ
  return monetizationFlag ? '–ú–æ–Ω–µ—Ç–∞ —Ç—ñ–Ω—å' : '–¢—ñ–Ω—å';
}

function setOmniSearchStatus(statusText) {
  // –ü—ñ–¥–º—ñ–Ω—è—î–º–æ Omnisearch input –Ω–∞ —Å—Ç–∞—Ç—É—Å
  try {
    waitForElement('input#query-input', (inp) => {
      if (!inp) return;
      inp.value = statusText;
      inp.setAttribute('placeholder', statusText);
      // —Ç—Ä–∏–≥–µ—Ä–∏–º–æ –ø–æ–¥—ñ—é, —â–æ–± YouTube –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–≤ –∑–Ω–∞—á–µ–Ω–Ω—è
      inp.dispatchEvent(new Event('input', { bubbles: true }));
      inp.dispatchEvent(new Event('change', { bubbles: true }));
      dlog('OmniSearch —Å—Ç–∞—Ç—É—Å:', statusText);
    }, 8000);
  } catch (e) {
    derr('setOmniSearchStatus error:', e);
  }
}

  function ensureHeaderButton() {
    if (document.querySelector('#extract-button')) return;
    const container = findHeaderContainer();
    if (!container) return;
    const btn = document.createElement('button');
    btn.id = 'extract-button';
    btn.textContent = 'üìä –î–∞–Ω—ñ'; // –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
    btn.style.cssText = `
      margin-left: 10px;
      background-color: #3ea6ff;
      color: white;
      border: none;
      padding: 6px 12px;
      font-weight: bold;
      border-radius: 4px;
      cursor: pointer;
    `;
    btn.addEventListener('click', onExtractClick);
    container.appendChild(btn);
    dlog('–ö–Ω–æ–ø–∫–∞ "–î–∞–Ω—ñ" —ñ–Ω–∂–µ–∫—Ç–æ–≤–∞–Ω–∞');
  }

  function waitForElement(selector, cb, timeoutMs = 25000, intervalMs = 200) {
    const start = Date.now();
    const iv = setInterval(() => {
      const el = document.querySelector(selector);
      if (el) { clearInterval(iv); dlog('wait OK:', selector); cb(el); }
      else if (Date.now() - start > timeoutMs) { clearInterval(iv); derr('wait TIMEOUT:', selector); }
    }, intervalMs);
  }

  function parseNumber(text) {
    const s = String(text || '').replace(/\u00A0/g, ' ').replace(/\s/g, '').replace(/,/g, '.');
    const m = s.match(/-?\d+(\.\d+)?/);
    return m ? Number(m[0]) : 0;
  }

  // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–µ—Ä –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é "—Ç—ã—Å./—Ç–∏—Å./k" —ñ "–º–ª–Ω/m" + –æ—á–∏—Å—Ç–∫–∞ –≤–∞–ª—é—Ç–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
  function parseNumberWithUnits(raw) {
    let text = String(raw || '')
      .replace(/\u00A0/g, ' ')   // NBSP ‚Üí –ø—Ä–æ–±—ñ–ª
      .trim()
      .toLowerCase();

    // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≤–∞–ª—é—Ç–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    text = text.replace(/[$‚Ç¥‚Ç¨‚ÇΩ]/g, '').trim();

    // –∑–∞–º—ñ–Ω–∞ –∫–æ–º–∏ –Ω–∞ –∫—Ä–∞–ø–∫—É –¥–ª—è –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö
    const numMatch = text.replace(',', '.').match(/-?\d+(\.\d+)?/);
    let base = numMatch ? parseFloat(numMatch[0]) : NaN;
    if (isNaN(base)) return 0;

    // –º–Ω–æ–∂–Ω–∏–∫–∏
    if (/(—Ç—ã—Å|—Ç–∏—Å|k)\.?/.test(text)) base *= 1000;
    if (/(–º–ª–Ω|m)\.?/.test(text))     base *= 1_000_000;

    return base;
  }
// === YSE: —Å—Ç–∏–ª—ñ –±–µ–π–¥–∂–∞ –≤ Omnisearch (–Ω–æ–≤–µ) ===
// === YSE: —Å—Ç–∏–ª—ñ –±–µ–π–¥–∂–∞, —â–æ —ñ–º—ñ—Ç—É—î –ø–æ–ª–µ –ø–æ—à—É–∫—É ===
(function injectYseBadgeStyles() {
  if (document.getElementById('yse-badge-styles')) return;
  const css = `
    .yse-badge-search {
      display: flex;
      align-items: center;
      width: 100%;
      box-sizing: border-box;
      padding: 0 12px;
      height: 40px;                 /* fallback ‚Äî –¥–∞–ª—ñ —Å–ø—Ä–æ–±—É—î–º–æ –ø—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑ –æ–±—á–∏—Å–ª–µ–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤ */
      border-radius: 24px;          /* fallback */
      background: rgba(255,255,255,0.06); /* fallback –¥–ª—è dark */
      border: 1px solid rgba(255,255,255,0.12); /* fallback */
      gap: 10px;
      cursor: default;
      user-select: none;
      font-weight: 500;
      font-size: 14px;
      line-height: 1;
    
      justify-content: center;
      gap: 0;
    }
    .yse-search-icon {
      width: 20px; height: 20px; flex: 0 0 20px;
      opacity: .72;
    }
    .yse-chip {
      display: inline-flex; align-items: center; justify-content: center;
      padding: 4px 8px; border-radius: 999px; font-weight: 600;
      border: 1px solid transparent; line-height: 1;
    
      width: 100%;
      text-align: center;
      justify-content: center;
      padding: 6px 0;
    }
    /* –∫–æ–ª—å–æ—Ä–∏ —á–∏–ø–∞ */
    .yse-chip-green  { color: #22c55e; background: rgba(34,197,94,0.12);  border-color: rgba(34,197,94,0.25); }
    .yse-chip-orange { color: #f59e0b; background: rgba(245,158,11,0.12); border-color: rgba(245,158,11,0.25); }
    .yse-chip-blue   { color: #3b82f6; background: rgba(59,130,246,0.12); border-color: rgba(59,130,246,0.25); }
    .yse-chip-red    { color: #ef4444; background: rgba(239,68,68,0.12);  border-color: rgba(239,68,68,0.25); }
    .yse-chip-gray   { color: #9ca3af; background: rgba(156,163,175,0.12);border-color: rgba(156,163,175,0.25); }

    .yse-status-text { opacity: .92; }
    .yse-badge-search.yse-no-bg { background: transparent !important; border: none !important; }
  `;
  const style = document.createElement('style');
  style.id = 'yse-badge-styles';
  style.textContent = css;
  document.head.appendChild(style);
})();


// –ú–∞–ø–ø–µ—Ä –∫–æ–ª—å–æ—Ä—ñ–≤ –∑–∞ –Ω–∞–∑–≤–æ—é —Å—Ç–∞—Ç—É—Å—É
function yseGetStatusColorClass(statusText = '') {
  const s = String(statusText).toLowerCase();
  if (s.includes('—Ç–æ–ø')) return 'yse-green';
  if (s.includes('–≥—É–¥')) return 'yse-orange';
  if (s.includes('–Ω–æ—Ä–º')) return 'yse-blue';
  if (s.includes('–∑–∞–º—ñ–Ω–∞') || s.includes('—Ç—ñ–Ω—å')) return 'yse-red';
  if (s.includes('–Ω—É–ª—è—á')) return 'yse-gray';
  // –¥–µ—Ñ–æ–ª—Ç ‚Äî —Å–∏–Ω—ñ–π
  return 'yse-blue';
}
// === Helpers added to fix ReferenceError & style copy ===
// Map color class name to chip class name, e.g. "yse-green" -> "yse-chip-green"
const yseGetStatusChipClass = (statusText = '') => {
  try {
    const base = yseGetStatusColorClass(statusText); // returns yse-green / yse-orange / ...
    return base.replace(/^yse-/, 'yse-chip-');       // -> yse-chip-green / ...
  } catch (e) {
    return 'yse-chip-blue';
  }
};

// Copy size/rounded/padding from the search layer so our badge matches the search field look
function yseApplyBoxLookFromLayer(layer, box) {
  try {
    if (!layer || !box) return;
    const cs = getComputedStyle(layer);
    if (cs) {
      if (cs.height) box.style.height = cs.height;
      if (cs.borderRadius) box.style.borderRadius = cs.borderRadius;
      if (cs.padding) box.style.padding = cs.padding;
      if (cs.backgroundColor && cs.backgroundColor !== 'rgba(0, 0, 0, 0)') {
        box.style.background = cs.backgroundColor;
      }
      if (cs.border && cs.border !== '0px none rgb(0, 0, 0)') {
        box.style.border = cs.border;
      }
    }
    // Also try to mirror the inner input styles if present
    const inp = layer.querySelector('input, #query-input');
    if (inp) {
      const ci = getComputedStyle(inp);
      if (ci.height) box.style.height = ci.height;
      if (ci.borderRadius) box.style.borderRadius = ci.borderRadius;
      if (ci.padding) box.style.padding = ci.padding;
      if (ci.fontSize) box.style.fontSize = ci.fontSize;
      if (ci.lineHeight) box.style.lineHeight = ci.lineHeight;
    }
  } catch (_) { /* no-op */ }
}


// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–µ–π–¥–∂–∞ –∑–∞–º—ñ—Å—Ç—å —ñ–Ω–ø—É—Ç–∞ –ø–æ—à—É–∫—É
// –ó–∞–º—ñ–Ω—é—î –∫–æ–Ω—Ç–µ–Ω—Ç —É #search-layer –Ω–∞ –Ω–∞—à –±–µ–π–¥–∂-—Å—Ç–∞—Ç—É—Å (–±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—É–∑–ª–∞)
function setOmniSearchBadge(statusText) {
  try {
    waitForElement('div#search-layer.style-scope.ytcp-omnisearch', (layer) => {
      if (!layer) return;

      // 1) —Å—Ö–æ–≤–∞—Ç–∏ –≤—Å—ñ —à—Ç–∞—Ç–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–æ—à—É–∫—É
      Array.from(layer.childNodes || []).forEach((n) => { if (n && n.style) n.style.display = 'none'; });

      // 2) —Å—Ç–≤–æ—Ä–∏—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ –Ω–∞—à –±–æ–∫—Å
      let box = layer.querySelector('#yse-status-box');
      const chipClass = yseGetStatusChipClass(statusText);

      if (!box) {
        box = document.createElement('div');
        box.id = 'yse-status-box';
        box.className = 'yse-badge-search';

        const chip = document.createElement('span');
        chip.className = `yse-chip ${chipClass}`;
        chip.textContent = statusText;

        box.appendChild(chip);

        // –∑–∞—Å—Ç–æ—Å—É—î–º–æ —Å—Ç–∏–ª—ñ —à–∞—Ä—É, —â–æ–± –≤–∏–≥–ª—è–¥–∞—Ç–∏ —è–∫ –ø–æ–ª–µ –ø–æ—à—É–∫—É
        yseApplyBoxLookFromLayer(layer, box);

        layer.appendChild(box);

        // —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á, —â–æ–± –≤—ñ–¥–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –±–ª–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—Ü—ñ
        const mo = new MutationObserver(() => {
          if (!layer.contains(box)) {
            const re = document.createElement('div');
            re.id = 'yse-status-box';
            re.className = 'yse-badge-search';
            const c2 = document.createElement('span');
            c2.className = `yse-chip ${chipClass}`;
            c2.textContent = statusText;
            re.appendChild(c2);
            yseApplyBoxLookFromLayer(layer, re);
            layer.appendChild(re);
            box = re;
          }
          // –∑–Ω–æ–≤ —Å—Ö–æ–≤–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
          Array.from(layer.childNodes || []).forEach((n) => {
            if (n && n !== box && n.style) n.style.display = 'none';
          });
        });
        mo.observe(layer, { childList: true, subtree: false });
      } else {
        // –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —á–∏–ø–∞
        const chip = box.querySelector('.yse-chip');
        if (chip) {
          chip.className = `yse-chip ${chipClass}`;
          chip.textContent = statusText;
        }
      }

      if (statusText && box) { box.classList.add('yse-no-bg'); }
      dlog('OmniSearch: –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ —á–∏–ø —Å—Ç–∞—Ç—É—Å—É –±–µ–∑ —ñ–∫–æ–Ω–∫–∏:', statusText);
    }, 10000);
  } catch (e) {
    derr('setOmniSearchBadge error:', e);
  }
}


  function removeSignOutMenuItem() {
    try {
      const link = document.querySelector(
        'ytd-compact-link-renderer a[href*="/logout"], ' +
        'a[href^="https://www.youtube.com/logout"], ' +
        'a[href^="https://accounts.google.com/Logout"]'
      );
      if (link) {
        const parentItem = link.closest('ytd-compact-link-renderer, tp-yt-paper-item');
        if (parentItem) {
          parentItem.remove();
          dlog('–ü—Ä–∏–±—Ä–∞–Ω–æ –ø—É–Ω–∫—Ç "–í–∏–π—Ç–∏"');
        }
      }
    } catch (e) {
      derr('removeSignOutMenuItem error:', e);
    }
  }

  // ---------- –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–ª—ñ–∫–∏ (—ñ–º—ñ—Ç–∞—Ü—ñ—è) ----------
  // –ö–ª—ñ–∫ –ø–æ –ø—É–Ω–∫—Ç—É ¬´–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞¬ª (–±–µ–∑ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É)
  function clickAnalyticsTab(done) {
    dlog('–í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ê–Ω–∞–ª—ñ—Ç–∏–∫—É (–∫–ª—ñ–∫)‚Ä¶');
    // –ø—Ä–æ–±—É—î–º–æ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
    const tryClick = () => {
      const el =
        document.querySelector('a[title*="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"], a[title*="Analytics"], a[href*="/analytics"]') ||
        document.querySelector('#menu-paper-icon-item-2'); // –∑–∞–ø–∞—Å–Ω–∏–π
      if (el) {
        el.click();
        // —á–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ –∑‚Äô—è–≤–ª—è—Ç—å—Å—è –µ–ª–µ–º–µ–Ω—Ç–∏ overview
        waitForElement('.metric-value.style-scope.yta-latest-activity-card', () => {
          dlog('–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞');
          if (typeof done === 'function') done();
        }, 25000);
        return true;
      }
      return false;
    };
    if (!tryClick()) {
      // —è–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç —â–µ –Ω–µ –≤ DOM ‚Äî —á–µ–∫–∞—î–º–æ —Ö–µ–¥–µ—Ä —ñ –ø—Ä–æ–±—É—î–º–æ –∑–Ω–æ–≤—É
      waitForElement('ytd-app, ytcp-header', () => { tryClick(); }, 20000);
    }
  }

  // –∫–ª—ñ–∫ –ø–æ –≤–∫–ª–∞–¥—Ü—ñ "–ö–æ–Ω—Ç–µ–Ω—Ç" (—ñ –ü–ê–£–ó–ê 3—Å –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º)
  function clickContentTab() {
    waitForElement('#content', (contentTab) => {
      contentTab.click();
      dlog('–ö–ª—ñ–∫ –ø–æ #content –≤–∏–∫–æ–Ω–∞–Ω–æ, —á–µ–∫–∞—î–º–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–Ω—è #right-side-bar‚Ä¶');

      // üÜï —Å—Ç–∞—Ä—Ç –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Å–µ–∫—É–Ω–¥–æ–º—ñ—Ä–∞ "‚è±Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç N—Å"
      try {
        if (contentWaitTimer) { clearInterval(contentWaitTimer); contentWaitTimer = null; }
        let secs = 0;
        setButtonStatus(`‚è±Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç ${secs}—Å`);
        contentWaitTimer = setInterval(() => {
          secs += 1;
          setButtonStatus(`‚è±Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç ${secs}—Å`);
        }, 1000);
      } catch (e) {
        // –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      }

      // –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–∫–∏ #right-side-bar —Å—Ç–∞–Ω–µ display:none
      const start = Date.now();
      const iv = setInterval(() => {
        const el = document.querySelector('#right-side-bar');
        if (el && el.style.display === 'none') {
          clearInterval(iv);
          // üÜï —Å—Ç–æ–ø —Å–µ–∫—É–Ω–¥–æ–º—ñ—Ä–∞
          if (contentWaitTimer) { clearInterval(contentWaitTimer); contentWaitTimer = null; }
          dlog('#right-side-bar –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ, –ø–∞—Ä—Å–∏–º–æ Content');
          extractContentDataAndSend();
        } else if (Date.now() - start > 20000) { // —Ç–∞–π–º–∞—É—Ç 20—Å
          clearInterval(iv);
          // üÜï —Å—Ç–æ–ø —Å–µ–∫—É–Ω–¥–æ–º—ñ—Ä–∞ (fallback)
          if (contentWaitTimer) { clearInterval(contentWaitTimer); contentWaitTimer = null; }
          derr('–ù–µ –¥–æ—á–µ–∫–∞–ª–∏—Å—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è #right-side-bar, –≤–∏–∫–ª–∏–∫–∞—é fallback');
          extractContentDataAndSend();
        }
      }, 200);
    });
  }

  // ---------- –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–ª–æ—É ----------
  function onExtractClick() {
    try {
      dlog('–ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ "–î–∞–Ω—ñ"');
      setButtonStatus('üîÑ –ü–æ—á–∏–Ω–∞—é‚Ä¶');   // —Å—Ç–∞—Ä—Ç
      forceCollect = true;
      removeSignOutMenuItem();

      // 0) channelId –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ URL (–±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤)
      overviewChannelId = (location.href.match(/\/channel\/([^/]+)/)?.[1]) || '';
      dlog('channelId:', overviewChannelId || '(–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)');

      // 1) –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ ¬´–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞¬ª –∫–ª—ñ–∫–æ–º, –¥–∞–ª—ñ ‚Äî Overview ‚Üí Lifetime ‚Üí 3—Å ‚Üí –ø–∞—Ä—Å–∏–Ω–≥
      clickAnalyticsTab(() => {
        extractOverviewData(() => {
          // 2) –ü—ñ—Å–ª—è Overview ‚Äî –∫–ª—ñ–∫–∞—î–º–æ Content (—ñ–∑ 3—Å –ø–∞—É–∑–æ—é –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ clickContentTab)
          clickContentTab(() => {
            // 3) –ü–∞—Ä—Å–∏–º–æ Content —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ
            extractContentDataAndSend();
          });
        });
      });
    } catch (e) {
      derr('onExtractClick error:', e);
      setButtonStatus('‚ùå –ü–æ–º–∏–ª–∫–∞');
    }
  }

  // >>> –û–ù–û–í–õ–ï–ù–û –∑–≥—ñ–¥–Ω–æ –¢–ó: —ñ–º—ñ—Ç–∞—Ü—ñ—è –∫–ª—ñ–∫—É –ø–µ—Ä—ñ–æ–¥—É ‚Üí Lifetime ‚Üí 3—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è ‚Üí –ø–∞—Ä—Å–∏–Ω–≥ ‚Üí monetization + 4-–π –±–ª–æ–∫
  function extractOverviewData(callback) {
    try {
      dlog('–í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥ —ñ –æ–±–∏—Ä–∞—î–º–æ Lifetime‚Ä¶');
      // –∫–Ω–æ–ø–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥—Ä–æ–ø–¥–∞—É–Ω—É –ø–µ—Ä—ñ–æ–¥—É
      waitForElement('div[role="button"].has-label.borderless.container.style-scope.ytcp-dropdown-trigger', (periodBtn) => {
        try {
          periodBtn.click();
          // –ø—É–Ω–∫—Ç –º–µ–Ω—é Lifetime
          waitForElement('[test-id="lifetime"]', (lifeItem) => {
            lifeItem.click();
            dlog('Lifetime –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ, –æ—á—ñ–∫—É—î–º–æ 3—Å‚Ä¶');

            setTimeout(() => {
              // —Ç–µ–ø–µ—Ä –ø–∞—Ä—Å–∏–º–æ –æ–≤–µ—Ä–≤‚Äô—é
              waitForElement('.metric-value.style-scope.yta-latest-activity-card', () => {
                try {
                  const metricElems = document.querySelectorAll('.metric-value.style-scope.yta-latest-activity-card');
                  const subscribers = parseNumber(metricElems[0]?.textContent || '0');  // –∑–∞–ª–∏—à–∞—î–º–æ –±–∞–∑–æ–≤–∏–π –ø–∞—Ä—Å–µ—Ä
                  const views48h = parseNumber(metricElems[1]?.textContent || '0');     // –∑–∞–ª–∏—à–∞—î–º–æ –±–∞–∑–æ–≤–∏–π –ø–∞—Ä—Å–µ—Ä

                  // totals: [0] = views (–∑–∞ –ø–µ—Ä—ñ–æ–¥), [1] = watch hours (–∑–∞ –ø–µ—Ä—ñ–æ–¥)
                  const totals = Array.from(document.querySelectorAll('#metric-total')).map(el => (el.textContent || '').trim());
                  const viewsPeriod = parseNumberWithUnits(totals[0] || '0');  // –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç—ã—Å/–º–ª–Ω
                  const hoursPeriod = parseNumberWithUnits(totals[1] || '0');  // –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç—ã—Å/–º–ª–Ω

                  overviewChannel = document.querySelector('#entity-name.entity-name')?.textContent.trim() || '–ë–µ–∑ –Ω–∞–∑–≤–∏';
                  overviewDateUTC = getDateInLA(); // üÜï LA date
                  oViews48h = views48h;
                  oViewsPeriod = viewsPeriod;
                  oHoursPeriod = hoursPeriod;
                  oSubscribers = subscribers;

                  // –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –±–ª–æ–∫—ñ–≤ yta-key-metric-block + 4-–π –±–ª–æ–∫ (–¥–æ—Ö—ñ–¥)
                  const blocks = document.querySelectorAll('div#container.layout.vertical.style-scope.yta-key-metric-block');
                  monetization = (blocks.length === 4); // 3 ‚Üí false, 4 ‚Üí true
                  if (blocks[3]) {
                    const m = blocks[3].querySelector('#metric-total');
                    let val = (m?.textContent || blocks[3].innerText || '').trim();
                    // –æ–¥—Ä–∞–∑—É –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ (–ø—Ä–∏–±–∏—Ä–∞—î $, –∫–æ–Ω–≤–µ—Ä—Ç—É—î —Ç—ã—Å/–º–ª–Ω)
                    fourthMetric = String(parseNumberWithUnits(val));
                  } else {
                    fourthMetric = '0';
                  }

                  dlog('Overview OK (normalized):', { overviewChannel, oSubscribers, oViews48h, oViewsPeriod, oHoursPeriod, monetization, fourthMetric });
                  setButtonStatus('‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞');
                  if (typeof callback === 'function') callback();
                } catch (e) {
                  derr('extractOverviewData parse error:', e);
                  setButtonStatus('‚ùå –ü–æ–º–∏–ª–∫–∞');
                }
              });
            }, 3000); // –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∞ –ø–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥–∏
          });
        } catch (e) {
          derr('extractOverviewData period click error (fallback –±–µ–∑ Lifetime):', e);
          // –§–æ–ª–±–µ–∫: –ø–∞—Ä—Å–∏–º–æ –±–µ–∑ –∑–º—ñ–Ω–∏ –ø–µ—Ä—ñ–æ–¥—É (–∞–ª–µ –∑ —Ç—ñ—î—é –∂ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—î—é –∑–Ω–∞—á–µ–Ω—å)
          waitForElement('.metric-value.style-scope.yta-latest-activity-card', () => {
            try {
              const metricElems = document.querySelectorAll('.metric-value.style-scope.yta-latest-activity-card');
              const subscribers = parseNumber(metricElems[0]?.textContent || '0');
              const views48h = parseNumber(metricElems[1]?.textContent || '0');

              const totals = Array.from(document.querySelectorAll('#metric-total')).map(el => (el.textContent || '').trim());
              const viewsPeriod = parseNumberWithUnits(totals[0] || '0');
              const hoursPeriod = parseNumberWithUnits(totals[1] || '0');

              overviewChannel = document.querySelector('#entity-name.entity-name')?.textContent.trim() || '–ë–µ–∑ –Ω–∞–∑–≤–∏';
              overviewDateUTC = getDateInLA(); // üÜï LA date (fallback)
              oViews48h = views48h;
              oViewsPeriod = viewsPeriod;
              oHoursPeriod = hoursPeriod;
              oSubscribers = subscribers;

              const blocks = document.querySelectorAll('div#container.layout.vertical.style-scope.yta-key-metric-block');
              monetization = (blocks.length === 4);
              if (blocks[3]) {
                const m = blocks[3].querySelector('#metric-total');
                let val = (m?.textContent || blocks[3].innerText || '').trim();
                fourthMetric = String(parseNumberWithUnits(val));
              } else {
                fourthMetric = '0';
              }

              dlog('Overview Fallback OK (normalized):', { monetization, fourthMetric });
              setButtonStatus('‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞');
              if (typeof callback === 'function') callback();
            } catch (e2) {
              derr('extractOverviewData fallback parse error:', e2);
              setButtonStatus('‚ùå –ü–æ–º–∏–ª–∫–∞');
            }
          });
        }
      });
    } catch (e) {
      derr('extractOverviewData outer error:', e);
      setButtonStatus('‚ùå –ü–æ–º–∏–ª–∫–∞');
    }
  }

  // ---------- CONTENT ----------
  // –ü–∞—Ä—Å–µ—Ä –∑–Ω–∞—á–µ–Ω—å –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—É—Ñ—ñ–∫—Å–∞–º–∏/—Ñ–æ—Ä–º–∞—Ç–∞–º–∏
  function parseMetric(raw, type) {
    let text = String(raw || '')
      .replace(/\u00A0/g, ' ')  // NBSP ‚Üí space
      .trim()
      .toLowerCase();

    // avgViewDuration: –∑–∞–ª–∏—à–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç m:ss —è–∫ —î
    if (type === 'avg') {
      const mmss = text.match(/^(\d{1,2}):([0-5]\d)$/);
      if (mmss) return mmss[0]; // –Ω–∞–ø—Ä. "5:08"
      return text;              // —Ñ–æ–ª–±–µ–∫ ‚Äî –≤—ñ–¥–¥–∞—î–º–æ —è–∫ —î
    }

    // –í–∏—Ç—è–≥–∞—î–º–æ —á–∏—Å–ª–æ (–∑ –∫–æ–º–æ—é –∞–±–æ –∫—Ä–∞–ø–∫–æ—é)
    const numMatch = text.replace(',', '.').match(/-?\d+(\.\d+)?/);
    const base = numMatch ? parseFloat(numMatch[0]) : NaN;

    if (type === 'ctr') {
      // –î–ª—è CTR –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑ —Å–∏–º–≤–æ–ª–æ–º %
      if (isNaN(base)) return '';
      // —è–∫—â–æ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ –±—É–ª–∞ –¥–µ—Å—è—Ç–∫–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ ‚Äî –ª–∏—à–∞—î–º–æ 1 –∑–Ω–∞–∫
      const withDecimal = /[.,]\d/.test(text);
      const val = withDecimal ? base.toFixed(1) : String(Math.round(base));
      return `${val}%`;
    }

    if (type === 'impr') {
      if (isNaN(base)) return 0;

      // –ú–Ω–æ–∂–Ω–∏–∫–∏: "—Ç—ã—Å.", "—Ç–∏—Å.", "k" ‚Üí √ó1000; "–º–ª–Ω", "m" ‚Üí √ó1e6
      let mul = 1;
      if (/(—Ç—ã—Å|—Ç–∏—Å|k)\.?/.test(text)) mul = 1000;
      if (/(–º–ª–Ω|m)\.?/.test(text))     mul = 1_000_000;

      return Math.round(base * mul); // 657,1 —Ç—ã—Å. ‚Üí 657100
    }

    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —á–∏—Å–ª–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    return isNaN(base) ? '' : base;
  }

  function extractContentDataAndSend() {
    try {
      // üÜï –±–µ–∑–ø–µ—á–Ω–µ –≤–∏–º–∫–Ω–µ–Ω–Ω—è —Å–µ–∫—É–Ω–¥–æ–º—ñ—Ä–∞, —è–∫—â–æ —â–µ –ø—Ä–∞—Ü—é—î
      if (contentWaitTimer) { clearInterval(contentWaitTimer); contentWaitTimer = null; }

      // –ü–æ—Ä—è–¥–æ–∫ –Ω–∞ /analytics/tab-content:
      // [0] Views, [1] Impressions, [2] CTR, [3] Average view duration
      const totals = Array.from(document.querySelectorAll('#metric-total'))
        .map(el => (el.textContent || '').trim());

      // Impressions –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ç—ã—Å./–º–ª–Ω (k/m)
      const impressions = parseNumberWithUnits(totals[1] || '0');

      // CTR –∑–∞–≤–∂–¥–∏ –∑ –≤—ñ–¥—Å–æ—Ç–∫–æ–º (7.9%)
      const ctrText = (totals[2] || '').replace(/\u00A0/g, ' ').trim().toLowerCase();
      const ctrNumMatch = ctrText.replace(',', '.').match(/-?\d+(\.\d+)?/);
      const ctr = ctrNumMatch ? `${(+ctrNumMatch[0]).toFixed(/[.,]\d/.test(ctrText) ? 1 : 0)}%` : '';

      // Average view duration —É —Ñ–æ—Ä–º–∞—Ç—ñ m:ss ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
      const avgRaw = (totals[3] || '').trim();
      const avgViewDuration = /^\d{1,2}:[0-5]\d$/.test(avgRaw) ? avgRaw : avgRaw;

      contentDateUTC = getDateInLA(); // üÜï LA date
      const contentMetrics = { impressions, ctr, avgViewDuration };

      dlog('Content metrics (normalized):', contentMetrics);
      setButtonStatus('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç'); // –∫–æ–Ω—Ç–µ–Ω—Ç –∑–ø–∞—Ä—à–µ–Ω–æ
      goToVideosAndExtractCount(contentMetrics);
    } catch (e) {
      derr('extractContentDataAndSend error:', e);
      setButtonStatus('‚ùå –ü–æ–º–∏–ª–∫–∞');
    }
  }

  function goToVideosAndExtractCount(contentMetrics) {
  dlog('–í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é "–ö–æ–Ω—Ç–µ–Ω—Ç" (–∫–ª—ñ–∫)‚Ä¶');

  // –∫–ª—ñ–∫ –ø–æ –ø—É–Ω–∫—Ç—É "–ö–æ–Ω—Ç–µ–Ω—Ç" —É –ª—ñ–≤–æ–º—É –º–µ–Ω—é
  const candidates = [
    '#menu-paper-icon-item-1',                         // —á–∞—Å—Ç–æ —Å–∞–º–µ –≤—ñ–Ω
    'a[title*="–ö–æ–Ω—Ç–µ–Ω—Ç"]',
    'a[title*="Content"]',
    'a[href*="/content"]',
    'a[href*="/videos"]',
    '#content'                                         // –∑–∞–ø–∞—Å–Ω–∏–π (—É –¥–µ—è–∫–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö)
  ];

  const clickEl = (el) => {
    try {
      el.scrollIntoView({ block: 'center', inline: 'center' });
      el.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true }));
      return true;
    } catch (e) {
      derr('–ü–æ–º–∏–ª–∫–∞ –∫–ª—ñ–∫—É –ø–æ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é "–ö–æ–Ω—Ç–µ–Ω—Ç":', e);
      return false;
    }
  };

  // 1) —à—É–∫–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é —ñ –∫–ª—ñ–∫–∞—î–º–æ
  let clicked = false;
  const startFind = Date.now();
  const findIv = setInterval(() => {
    for (const sel of candidates) {
      const el = document.querySelector(sel);
      if (el && clickEl(el)) {
        dlog('–ö–ª—ñ–∫ –ø–æ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é "–ö–æ–Ω—Ç–µ–Ω—Ç":', sel);
        clicked = true;
        clearInterval(findIv);
        waitForUrlThenParse();
        return;
      }
    }
    if (Date.now() - startFind > 15000) {
      clearInterval(findIv);
      dlog('–ù–µ –∑–Ω–∞–π—à–æ–≤ –ø—É–Ω–∫—Ç "–ö–æ–Ω—Ç–µ–Ω—Ç" –∑–∞ 15—Å ‚Äî –ø—Ä–æ–¥–æ–≤–∂—É—é —Ñ–æ–ª–±–µ–∫–æ–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è URL‚Ä¶');
      waitForUrlThenParse(); // –≤—Å–µ –æ–¥–Ω–æ –ø–µ—Ä–µ–π–¥–µ–º–æ –¥–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è URL
    }
  }, 250);

  // 2) —á–µ–∫–∞—î–º–æ –ü–ï–†–ï–•–Ü–î –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É, –æ–¥—Ä–∞–∑—É —á–∏—Ç–∞—î–º–æ .page-description (–ë–ï–ó 3—Å —Ç–∞–π–º–∞—É—Ç—É)
  function waitForUrlThenParse() {
    const t0 = Date.now();
    const urlIv = setInterval(() => {
      const p = location.pathname;
      if (p.includes('/content') || p.includes('/videos')) {
        clearInterval(urlIv);
        dlog('URL = —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ö–æ–Ω—Ç–µ–Ω—Ç, –æ–¥—Ä–∞–∑—É —á–∏—Ç–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–±–µ–∑ 3—Å)‚Ä¶');
        readTotalAndSend(); // ‚Üê –±–µ–∑ –∑–∞—Ç—Ä–∏–º–∫–∏
      } else if (Date.now() - t0 > 15000) {
        clearInterval(urlIv);
        dlog('–ù–µ –¥–æ—á–µ–∫–∞–ª–∏—Å—å –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ /content|/videos –∑–∞ 15—Å (fallback). –ß–∏—Ç–∞—î–º–æ –æ–¥—Ä–∞–∑—É‚Ä¶');
        readTotalAndSend(); // ‚Üê –±–µ–∑ –∑–∞—Ç—Ä–∏–º–∫–∏
      }
    }, 200);
  }

  // 3) –∑—á–∏—Ç—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ —ñ —à–ª–µ–º–æ
  function readTotalAndSend() {
    try {
      // —É –º–µ–Ω–µ–¥–∂–µ—Ä—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–∑–≤–∏—á–∞–π —É .page-description
      waitForElement('.page-description', () => {
        const el = document.querySelector('.page-description');
        const rawText = el?.textContent || '';
        // –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ –¥–µ–∫—ñ–ª—å–∫–∞ –º–æ–≤–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
        const match = rawText.match(/(?:–∏–∑|of|–∑)\s*(?:–ø—Ä–∏–º–µ—Ä–Ω–æ|approximately)?\s*(\d+)/i);
        const total = match ? parseInt(match[1].replace(/\s/g, ''), 10) : NaN;

        if (isNaN(total)) { derr('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ total –∑ .page-description'); return; }

        const combinedData =
          `${overviewChannel};${overviewDateUTC};${oSubscribers};${oViewsPeriod};${oHoursPeriod};${oViews48h};${overviewChannel};` +
          `${contentMetrics.impressions};${contentMetrics.ctr}${'\u200B'};${contentMetrics.avgViewDuration}${'\u200B'};${contentDateUTC};${total}` +
          `;${monetization};${fourthMetric};${overviewChannelId}`;
// üÜï –ê–≤—Ç–æ-—Å—Ç–∞—Ç—É—Å —É –ø–æ—à—É–∫—É –∑–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏
const autoStatus = computeAutoStatus({
  monetizationFlag: monetization,
  views48h: oViews48h,
  hoursLifetime: oHoursPeriod,   // Lifetime –≥–æ–¥–∏–Ω–Ω–∏–∫ —É–∂–µ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
  subscribers: oSubscribers,
  totalVideos: total
});
setOmniSearchBadge(autoStatus);

        dlog('–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ:', combinedData);
        setButtonStatus('‚úâÔ∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞'); // —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º
        sendToSheet(combinedData, 'combined'); // –ª–∏—à–∞—î–º–æ —ñ—Å–Ω—É—é—á—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É/–ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        setButtonStatus('‚úÖ –ì–æ—Ç–æ–≤–æ');         // –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É (–≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –æ—á—ñ–∫—É—î–º–æ)
      }, 20000);
    } catch (e) {
      derr('readTotalAndSend error:', e);
      setButtonStatus('‚ùå –ü–æ–º–∏–ª–∫–∞');
    }
  }
}

  // ---------- –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ ----------
  function sendToSheet(value, mode) {
    GM_xmlhttpRequest({
      method: 'POST',
      url: 'https://script.google.com/macros/s/AKfycbyd0aMl6ZomWyWtNbzxMikqfYVq2RTArD0z97eyVaWWa3zDeLOk0qALtIkiseI393lS/exec',
      headers: { 'Content-Type': 'application/json' },
      data: JSON.stringify({ mode: mode, value: value })
    });
  }

  // ---------- —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ----------
  const obs = new MutationObserver(() => ensureHeaderButton());
  obs.observe(document.documentElement, { childList: true, subtree: true });
  ensureHeaderButton();

  // —Ç—Ä–∏–º–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–î–∞–Ω—ñ" –∂–∏–≤–æ—é (—Ä–µ-—ñ–Ω º—î–∫—Ü—ñ—è, —è–∫—â–æ YT –ø–µ—Ä–µ—Ä–∏—Å—É–≤–∞–≤ —Ö–µ–¥–µ—Ä)
  const keepBtnAliveIv = setInterval(() => {
    if (!getExtractButton()) ensureHeaderButton();
  }, 1000);

  // –∞–≤—Ç–æ–ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –ø—É–Ω–∫—Ç—É "–í–∏–π—Ç–∏" (—Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á –∑–∞ –≤—Å—ñ–º body)
  const signOutObserver = new MutationObserver(() => removeSignOutMenuItem());
  signOutObserver.observe(document.body, { childList: true, subtree: true });

  // –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –æ–¥—Ä–∞–∑—É
  removeSignOutMenuItem();

  dlog('Script ready');
   /* === LangBadge add-on (tinyld + smart fallback, ::after inline, 2025-08) ===
     –©–æ —Ä–æ–±–∏—Ç—å:
       ‚Ä¢ –î–æ–¥–∞—î –ø—Ä–∞–ø–æ—Ä + –Ω–∞–∑–≤—É –º–æ–≤–∏ —Å–ø—Ä–∞–≤–∞ –≤—ñ–¥ —Ç–∞–π—Ç–ª—É —è–∫ –ø—Å–µ–≤–¥–æ–∫–æ–Ω—Ç–µ–Ω—Ç ::after
       ‚Ä¢ –ü—Ä–∞—Ü—é—î –≤ –¥–≤–æ—Ö –º—ñ—Å—Ü—è—Ö:
           1) ytd-account-item-renderer #channel-title (–¥—Ä–æ–ø–ª–∏—Å—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤)
           2) #entity-name (–ª—ñ–≤–∏–π –¥—Ä–æ–≤–µ—Ä)
       ‚Ä¢ –ù–µ –ª–∞–º–∞—î –≤–µ—Ä—Å—Ç–∫—É: –±–µ–∑ —á—ñ–ø—ñ–≤, –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —à–∏—Ä–∏–Ω–∞ —Ç–∞–π—Ç–ª—É
         —à—Ç—É—á–Ω–æ —Ä–æ–∑—à–∏—Ä—é—î—Ç—å—Å—è –ø—ñ–¥ "–ù–∞–∑–≤–∞ + –ú–æ–≤–∞".
     –î–µ—Ç–µ–∫—Ç–æ—Ä:
       ‚Ä¢ –°–ø–µ—Ä—à—É tinyld (UMD) –∑ @require
       ‚Ä¢ –Ø–∫—â–æ tinyld –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π/–ø–æ–≤–µ—Ä–Ω—É–≤ 'la'/'und' ‚Äî –ª–æ–∫–∞–ª—å–Ω–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞ (DE/IT/EN + –∫–∏—Ä–∏–ª–∏—Ü—è)
  ============================================================================ */

  // ====== –º–∞–ø–∏ –Ω–∞–∑–≤ —ñ –ø—Ä–∞–ø–æ—Ä—ñ–≤ (ISO 639-1) ==================================
  const ISO2_TO_LABEL = {
    uk:'Ukrainian', ru:'Russian', be:'Belarusian', bg:'Bulgarian',
    pl:'Polish', cs:'Czech', sk:'Slovak', sl:'Slovenian',
    hr:'Croatian', sr:'Serbian', mk:'Macedonian',
    en:'English', de:'German', nl:'Dutch', fr:'French', es:'Spanish',
    pt:'Portuguese', it:'Italian', ro:'Romanian', hu:'Hungarian',
    tr:'Turkish', ar:'Arabic', he:'Hebrew', el:'Greek',
    ja:'Japanese', ko:'Korean', zh:'Chinese',
    vi:'Vietnamese', id:'Indonesian', ms:'Malay', th:'Thai'
  };
  const iso2Label = (code) => ISO2_TO_LABEL[code] || (code ? code.toUpperCase() : 'Unknown');

  const LANG_FLAG = {
    de:'üá©üá™', it:'üáÆüáπ', en:'üá¨üáß', uk:'üá∫üá¶', ru:'üá∑üá∫', pl:'üáµüá±', cs:'üá®üáø', sk:'üá∏üá∞',
    sl:'üá∏üáÆ', hr:'üá≠üá∑', sr:'üá∑üá∏', mk:'üá≤üá∞', nl:'üá≥üá±', fr:'üá´üá∑', es:'üá™üá∏', pt:'üáµüáπ',
    ro:'üá∑üá¥', hu:'üá≠üá∫', tr:'üáπüá∑', ar:'üá∏üá¶', he:'üáÆüá±', el:'üá¨üá∑', ja:'üáØüáµ', ko:'üá∞üá∑',
    zh:'üá®üá≥', vi:'üáªüá≥', id:'üáÆüá©', ms:'üá≤üáæ', th:'üáπüá≠'
  };
  const flagFor = (code) => LANG_FLAG[code] || 'üåê';

  // ====== tinyld –¥–µ—Ç–µ–∫—Ç–æ—Ä (UMD —è–∫ —Ñ—É–Ω–∫—Ü—ñ—è –∞–±–æ –æ–±'—î–∫—Ç —ñ–∑ .detect) =============
  function getDetector() {
    const t = window.tinyld;
    if (!t) return null;
    if (typeof t === 'function') return { detect: (txt) => t(txt) };
    if (typeof t.detect === 'function') return t;
    return null;
  }

  // ====== –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ (DE/IT/EN + –∫–∏—Ä–∏–ª–∏—Ü—è, –¥—ñ–∞–∫—Ä–∏—Ç–∏–∫–∞, —Å—Ç–æ–ø-—Å–ª–æ–≤–∞) ============
  const DE_MARKERS = [' der ',' die ',' das ',' und ',' mit ',' f√ºr ',' nicht ',' ber√ºhren ',' gl√ºck ',' zum ',' vom ',' einem ',' einer ',' √ºber '];
  const IT_MARKERS = [' di ',' e ',' la ',' le ',' gli ',' delle ',' degli ',' nelle ',' emozioni ',' nascosto ',' nascoste ',' sotto ',' tra '];
  const EN_MARKERS = [' and ',' with ',' for ',' the ',' hidden ',' moment ',' touch '];
  const DE_DIACRITICS = /[√§√∂√º√ü]/i;
  const IT_DIACRITICS = /[√†√®√©√¨√≠√Æ√≤√≥√π]/i;
  const HAS_CYRILLIC = /[–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î“ê“ë]/;

  function scoreByMarkers(text, markers) { let s=0; for (const m of markers) if (text.includes(m)) s++; return s; }
  function heuristicLangCode(textRaw) {
    const t = ' ' + String(textRaw || '').toLowerCase().normalize('NFC') + ' ';
    if (HAS_CYRILLIC.test(t)) return 'uk';
    if (DE_DIACRITICS.test(t)) return 'de';
    if (IT_DIACRITICS.test(t)) return 'it';
    if (/\b(die|der|zum|vom|√ºber)\b/.test(t)) return 'de';
    if (/\b(di|gli|delle|degli|nascoste|emozioni)\b/.test(t)) return 'it';
    const de = scoreByMarkers(t, DE_MARKERS);
    const it = scoreByMarkers(t, IT_MARKERS);
    const en = scoreByMarkers(t, EN_MARKERS);
    if (de > it && de >= 1) return 'de';
    if (it > de && it >= 1) return 'it';
    if (en >= 2 && en >= de && en >= it) return 'en';
    return null;
  }

  // ====== –æ—Å–Ω–æ–≤–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏ (–∫–æ–¥ + –Ω–∞–∑–≤–∞ + –ø—Ä–∞–ø–æ—Ä) =====================
  function detectLang(text) {
    const clean = String(text || '').replace(/\s+/g, ' ').trim();
    if (!clean) return { label:'Unknown', code:null, flag:'üåê' };

    if (clean.length <= 3) {
      if (HAS_CYRILLIC.test(clean)) return { label:'Ukrainian', code:'uk', flag:flagFor('uk') };
      return { label:'Unknown', code:null, flag:'üåê' };
    }

    // 1) tinyld
    try {
      const det = getDetector();
      if (det) {
        const out = det.detect(clean);
        let code = null;
        if (typeof out === 'string') code = out;
        else if (Array.isArray(out) && out[0]) code = out[0].lang || out[0].code || out[0].language;
        else if (out && typeof out === 'object') code = out.lang || out.code || out.language;
        if (code && code !== 'la' && code !== 'und' && code !== 'xx') {
          return { label: iso2Label(code), code, flag: flagFor(code) };
        }
      }
    } catch {}

    // 2) –ª–æ–∫–∞–ª—å–Ω–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞
    const h = heuristicLangCode(clean);
    if (h) return { label: iso2Label(h), code: h, flag: flagFor(h) };

    return { label:'Unknown', code:null, flag:'üåê' };
  }

  // ====== —Å—Ç–∏–ª—ñ: ::after + —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –±–ª–æ–∫—É –Ω–∞–∑–≤–∏ –ø—ñ–¥ "–ù–∞–∑–≤–∞ + –ú–æ–≤–∞" =========
  (function injectLangInlineAfterStyles(){
    if (document.getElementById('yse-lang-inline-after')) return;
    const style = document.createElement('style');
    style.id = 'yse-lang-inline-after';
    style.textContent = `
      /* —Ä–æ–±–∏–º–æ —Å–∞–º —Ç–∞–π—Ç–ª –≥–Ω—É—á–∫–∏–º –ø—ñ–¥ ¬´–ù–∞–∑–≤–∞ + –ú–æ–≤–∞¬ª */
      ytd-account-item-renderer #channel-title,
      #entity-name.entity-name {
        display: inline-block !important;
        width: auto !important;
        max-width: none !important;
        white-space: nowrap !important;
        vertical-align: baseline !important;
      }
      /* –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∞–≤–æ—Ä—É—á –ø—Ä–∞–ø–æ—Ä + –Ω–∞–∑–≤—É –º–æ–≤–∏ —è–∫ –ø—Å–µ–≤–¥–æ–∫–æ–Ω—Ç–µ–Ω—Ç */
      ytd-account-item-renderer #channel-title[data-lang-label]::after,
      #entity-name.entity-name[data-lang-label]::after {
        content: " " attr(data-lang-label);
        font: 500 11px/1.2 Roboto, Arial, sans-serif;
        white-space: nowrap;
        opacity: .85;
        margin-left: 6px;
      }
    `;
    document.head.appendChild(style);
  })();

  // ====== –∑–∞–ø–∏—Å—É—î–º–æ –ª–µ–π–±–ª —É data-–∞—Ç—Ä–∏–±—É—Ç (–Ω—ñ—è–∫–∏—Ö –Ω–æ–≤–∏—Ö DOM-–≤—É–∑–ª—ñ–≤) ===========
  function setInlineAfterLabel(targetEl, langObj){
    if (!targetEl || !langObj) return;
    targetEl.setAttribute('data-lang-label', `${langObj.flag} ${langObj.label}`);
  }

  // ====== readiness helpers ==================================================
  function waitFor(condFn, onOk, timeoutMs = 12000, intervalMs = 120) {
    const t0 = Date.now();
    const iv = setInterval(() => {
      try { if (condFn()) { clearInterval(iv); onOk(); }
            else if (Date.now() - t0 > timeoutMs) { clearInterval(iv); } }
      catch { clearInterval(iv); }
    }, intervalMs);
  }
  function waitForStableText(el, onStable, minLen = 2, quietMs = 200, timeoutMs = 8000) {
    let last = (el.textContent || '').trim();
    if (last.length >= minLen) {
      let timer = setTimeout(() => onStable(el), quietMs);
      const mo = new MutationObserver(() => {
        const cur = (el.textContent || '').trim();
        if (cur === last) return;
        last = cur; clearTimeout(timer);
        timer = setTimeout(() => { mo.disconnect(); onStable(el); }, quietMs);
      });
      mo.observe(el, { characterData:true, childList:true, subtree:true });
      setTimeout(() => { try { mo.disconnect(); } catch {} }, timeoutMs);
      return;
    }
    const mo = new MutationObserver(() => {
      const cur = (el.textContent || '').trim();
      if (cur.length >= minLen) { mo.disconnect(); waitForStableText(el, onStable, minLen, quietMs, timeoutMs); }
    });
    mo.observe(el, { characterData:true, childList:true, subtree:true });
    setTimeout(() => { try { mo.disconnect(); } catch {} }, timeoutMs);
  }

  function readyThenDetectAndRender(selector) {
    const runner = (el) => {
      waitForStableText(el, () => {
        const t = (el.textContent || '').trim();
        const langObj = detectLang(t);
        setInlineAfterLabel(el, langObj);
      });
    };
    if (typeof waitForElement === 'function') {
      waitForElement(selector, runner, 12000);
    } else {
      waitFor(() => !!document.querySelector(selector), () => runner(document.querySelector(selector)), 12000);
    }
  }

  // ====== —Ä–∞–∑–æ–≤—ñ —Ä–µ–Ω–¥–µ—Ä–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ DOM ==================================
  function renderAccountListInlineAfter(){
    document.querySelectorAll('ytd-account-item-renderer #channel-title').forEach((el)=>{
      const langObj = detectLang((el.textContent||'').trim());
      setInlineAfterLabel(el, langObj);
    });
  }
  function renderDrawerInlineAfter(){
    const el = document.querySelector('#entity-name.entity-name');
    if(!el) return;
    const langObj = detectLang((el.textContent||'').trim());
    setInlineAfterLabel(el, langObj);
  }

  // ====== —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ======================================================
  try {
    readyThenDetectAndRender('ytd-account-item-renderer #channel-title');
    readyThenDetectAndRender('#entity-name.entity-name');
  } catch {}

  // ====== debounce –º—É—Ç–∞—Ü—ñ–π (Studio –¥–∏–Ω–∞–º—ñ—á–Ω–µ) ================================
  let langMoScheduled = false;
  const safeKick = () => {
    if (langMoScheduled) return;
    langMoScheduled = true;
    setTimeout(() => {
      langMoScheduled = false;
      renderAccountListInlineAfter();
      renderDrawerInlineAfter();
    }, 250);
  };

  const moTargets = [document.body, document.querySelector('ytd-app') || document.documentElement].filter(Boolean);
  const langMo = new MutationObserver(safeKick);
  moTargets.forEach(t => langMo.observe(t, { childList:true, subtree:true }));

  setInterval(safeKick, 3500);

})();
